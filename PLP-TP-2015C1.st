TestCase subclass: #Test06ProductoDeMedidas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!Test06ProductoDeMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 20:29'!test02MedidasDeUnidadesCompuestasPorProductos	self assert: 6 kilogramo metro = (2 kilogramo * 3 metro).	self assert: 6 metro kilogramo = (2 kilogramo * 3 metro).	self assert: 6 segundo segundo = (2 segundo * 3 segundo).! !!Test06ProductoDeMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 20:26'!test01ProductoDeMedidas	| m |	m := 3 metro * 2 kilogramo.	self assert: (m isKindOf: Medida).	self assert: m cantidad  = 6.	self assert: m unidad = (Unidad kilogramo * Unidad metro)! !TestCase subclass: #Test03IgualdadMedidas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!Test03IgualdadMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 17:39'!test02MedidasDistintas	self assert: 1 kilogramo ~= 1 metro.	self assert: 2 kilogramo ~= 1 kilogramo.	self assert: 2 ~= 2 kilogramo.	self assert: 2 kilogramo ~= 2! !!Test03IgualdadMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 17:35'!test01MedidasIguales	self assert: 1 metro = 1 metro! !TestCase subclass: #Test08ImprimirUnidades	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!Test08ImprimirUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/10/2015 10:27'!test01UnidadesBasicasViaPrintOn	| salida |	salida := String new writeStream.	Unidad metro printOn: salida.	self assert: salida contents equals: 'metro'! !!Test08ImprimirUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/10/2015 10:31'!test03ProductoViaPrintOn	| salida |	salida := String new writeStream.	Unidad metro * Unidad kilogramo printOn: salida.	self assert: salida contents equals: 'metro kilogramo'! !!Test08ImprimirUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/10/2015 10:29'!test02UnidadEscalarViaPrintOn	| salida |	salida := String new writeStream.	Unidad escalar printOn: salida.	self assert: salida contents equals: 'escalar'! !TestCase subclass: #Test13ImprimirMedidas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!Test13ImprimirMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/11/2015 12:21'!test02DivisionSinNumerador	self assertPrintOn: 4 / 2 segundo equals: '2 1 / segundo'! !!Test13ImprimirMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/11/2015 12:18'!assertPrintOn: unObjeto equals: unString 	| salida |	salida := String new writeStream.	unObjeto printOn: salida.	self assert: salida contents equals: unString! !!Test13ImprimirMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/11/2015 12:20'!test01Division	self assertPrintOn: 4 metro / 2 segundo equals: '2 metro / segundo'! !TestCase subclass: #Test07SumaDeUnidades	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!Test07SumaDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 21:51'!test03RestaUnidadesIguales	self assert: 3 metro - 2 metro = 1 metro.	self assert: 3 metro segundo - 2 metro segundo = 1 metro segundo! !!Test07SumaDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 20:57'!test01SumaUnidadesIguales	self assert: 2 metro + 3 metro = 5 metro.	self assert: 2 metro segundo + 3 metro segundo = 5 metro segundo! !!Test07SumaDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 21:50'!test02SumaUnidadesDistintasError	self should: [ 2 metro + 3 segundo ] raise: Error description: 'Unidades distintas'.	self should: [ 2 + 3 segundo ] raise: Error description: 'Unidades distintas'! !!Test07SumaDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 21:55'!test04RestaUnidadesDistintasError	self should: [ 3 metro - 2 segundo ] raise: Error description: 'Unidades distintas'.	self should: [ 2 - 3 segundo ] raise: Error description: 'Unidades distintas'! !TestCase subclass: #Test10DivisionDeUnidades	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/8/2015 19:51'!test21DivisionProductoDividiendoBasica	| m_inv |	m_inv := (Unidad metro * Unidad metro dividiendoBasica: Unidad metro).		self assert: (m_inv isKindOf: DivisionDeUnidades).	self assertCollection: m_inv numerador hasSameElements: { }.	self assertCollection: m_inv denominador hasSameElements: { Unidad metro. Unidad metro. Unidad metro }.! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 18:36'!test29ProductoDivisionPorProducto	self assert: (Unidad escalar / Unidad segundo productoProducto: Unidad metro * Unidad kilogramo) = (Unidad metro * Unidad kilogramo / Unidad segundo)! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/5/2015 02:02'!test05DivisionUnidadesBasicasConOperador	self assert: (Unidad metro / Unidad segundo isKindOf: DivisionDeUnidades).	self assert: (Unidad metro / Unidad metro) = Unidad escalar! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/5/2015 02:03'!test08DivisionEscalarConOperador	self assert: (Unidad escalar / Unidad segundo isKindOf: DivisionDeUnidades).	self assert: (Unidad metro / Unidad escalar) = Unidad metro! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/8/2015 19:56'!test23DivisionesIguales	self assert: (Unidad metro * Unidad kilogramo / Unidad segundo) = (Unidad metro * Unidad kilogramo / Unidad segundo)! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/5/2015 02:01'!test03DivisionUnidadesBasicasDistintas	| m_s |	m_s := Unidad segundo dividiendoBasica: Unidad metro.	self assert: (m_s isKindOf: DivisionDeUnidades).	self assertCollection: m_s numerador hasSameElements: { Unidad metro }.	self assertCollection: m_s denominador hasSameElements: { Unidad segundo }.! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/8/2015 19:48'!test16DivisionDivisionDividiendoProducto	self assert: (Unidad escalar / Unidad metro dividiendoProducto: Unidad metro * Unidad metro) = (Unidad metro * Unidad metro * Unidad metro)! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 18:33'!test28ProductoBasicaPorDivision	self assert: (Unidad kilogramo productoDivision: Unidad metro / Unidad segundo) = (Unidad metro * Unidad kilogramo / Unidad segundo)! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/5/2015 02:01'!test01DivisionEscalarConEscalar	self assert: (Unidad escalar dividiendoEscalar: Unidad escalar) = Unidad escalar! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/8/2015 18:23'!test11DivisionEscalarDividiendoProductoConOperador	| m_inv |	m_inv := Unidad escalar / (Unidad metro * Unidad metro).	self assert: (m_inv isKindOf: DivisionDeUnidades).	self assertCollection: m_inv numerador hasSameElements: { }.	self assertCollection: m_inv denominador hasSameElements: { Unidad metro. Unidad metro }.		self assert: (Unidad metro * Unidad metro / Unidad escalar) = (Unidad metro * Unidad metro).! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/8/2015 18:23'!test10DivisionEscalarDividiendoProducto	self assert: (Unidad escalar dividiendoProducto: Unidad metro * Unidad metro) = (Unidad metro * Unidad metro).! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/8/2015 19:45'!test12DivisionDivisionDividiendoEscalar	self assert: (Unidad escalar / Unidad metro dividiendoEscalar: Unidad escalar) = Unidad metro! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/5/2015 02:01'!test02DivisionEscalarConEscalarConOperador	self assert: (Unidad escalar / Unidad escalar) = Unidad escalar! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/8/2015 19:48'!test18DivisionDivisionDividiendoDivision	self assert: (Unidad escalar / Unidad metro dividiendoDivision: Unidad escalar / Unidad metro) = Unidad escalar.		self assert: (Unidad escalar / Unidad metro dividiendoDivision: Unidad segundo / Unidad metro) = Unidad segundo! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/8/2015 19:53'!test22DivisionProductoDividiendoProducto	self assert: (Unidad metro * Unidad metro dividiendoProducto: Unidad metro * Unidad metro * Unidad metro) = Unidad metro! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/8/2015 18:22'!test09DivisionProductoDividiendoEscalar	| m_inv |	m_inv := (Unidad metro * Unidad metro) dividiendoEscalar: Unidad escalar.	self assert: (m_inv isKindOf: DivisionDeUnidades).	self assertCollection: m_inv numerador hasSameElements: { }.	self assertCollection: m_inv denominador hasSameElements: { Unidad metro. Unidad metro }.! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/8/2015 19:57'!test24DivisionesDistintas	self assert: (Unidad metro * Unidad kilogramo / Unidad segundo) ~= (Unidad metro / Unidad segundo).	self assert: (Unidad metro / (Unidad segundo * Unidad kilogramo)) ~= (Unidad metro / Unidad segundo)! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/5/2015 02:02'!test07DivisionBasicaDividiendoEscalar	| m_inv |	m_inv := Unidad metro dividiendoEscalar: Unidad escalar.	self assert: (m_inv isKindOf: DivisionDeUnidades).	self assertCollection: m_inv numerador hasSameElements: { }.	self assertCollection: m_inv denominador hasSameElements: { Unidad metro }.! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/8/2015 19:46'!test13DivisionEscalarDividiendoDivision	| m_inv |	m_inv := (Unidad escalar dividiendoDivision: Unidad escalar / Unidad metro).	self assert: (m_inv isKindOf: DivisionDeUnidades).	self assertCollection: m_inv numerador hasSameElements: { }.	self assertCollection: m_inv denominador hasSameElements: { Unidad metro. }.! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/8/2015 19:48'!test17DivisionProductoDividiendoDivision	| m_inv |	m_inv := (Unidad metro * Unidad metro dividiendoDivision: Unidad escalar / Unidad metro).	  self assert: (m_inv isKindOf: DivisionDeUnidades).	self assertCollection: m_inv numerador hasSameElements: { }.	self assertCollection: m_inv denominador hasSameElements: { Unidad metro. Unidad metro. Unidad metro }.! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 20:12'!test32ProductoDivisionConOperador	self assert: ((Unidad metro / Unidad segundo) * (Unidad escalar / Unidad segundo)) = (Unidad metro / (Unidad segundo * Unidad segundo))! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 18:29'!test26ProductoEscalarPorDivision	self assert: (Unidad escalar productoDivision: Unidad metro / Unidad segundo) = (Unidad metro / Unidad segundo)! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/8/2015 19:47'!test15DivisionBasicaDividiendoDivision	| m_inv |	m_inv := (Unidad metro dividiendoDivision: Unidad escalar / Unidad metro).	  self assert: (m_inv isKindOf: DivisionDeUnidades).	self assertCollection: m_inv numerador hasSameElements: { }.	self assertCollection: m_inv denominador hasSameElements: { Unidad metro. Unidad metro }.! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/5/2015 02:02'!test04DivisionUnidadesBasicasIguales	self assert: (Unidad metro dividiendoBasica: Unidad metro) = Unidad escalar! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 18:31'!test27ProductoDivisionPorBasica	self assert: (Unidad metro / Unidad segundo productoBasica: Unidad kilogramo) = (Unidad metro * Unidad kilogramo / Unidad segundo)! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/5/2015 02:04'!test06DivisionEscalarDividiendoBasica	self assert: (Unidad escalar dividiendoBasica: Unidad metro) = Unidad metro.! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/8/2015 19:28'!test19DivisionDivisionConOperador	self assert: (Unidad segundo / Unidad metro) / (Unidad escalar / Unidad metro) = Unidad segundo! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 18:42'!test30ProductoProductoPorDivision	self assert: (Unidad metro * Unidad kilogramo productoDivision: Unidad escalar / Unidad segundo) = (Unidad metro * Unidad kilogramo / Unidad segundo)! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/8/2015 19:47'!test14DivisionDivisionDividiendoBasica	self assert: (Unidad escalar / Unidad metro dividiendoBasica: Unidad metro) = (Unidad metro * Unidad metro)! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/8/2015 19:49'!test20DivisionBasicaDividiendoProducto	self assert: (Unidad metro dividiendoProducto: Unidad metro * Unidad metro) = Unidad metro! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 18:44'!test31ProductoDivisionPorDivision	self assert: (Unidad metro / Unidad segundo productoDivision: Unidad escalar / Unidad segundo) = (Unidad metro / (Unidad segundo * Unidad segundo))! !!Test10DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 18:28'!test25ProductoDivisionPorEscalar	self assert: (Unidad metro / Unidad segundo productoEscalar: Unidad escalar) = (Unidad metro / Unidad segundo)! !TestCase subclass: #Test11DivisionDeMedidas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!Test11DivisionDeMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 20:36'!test02DivisionEscalarConUnidades	| m |	m := 6 / (2 segundo).	self assert: (m isKindOf: Medida).	self assert: m cantidad = 3.	self assert: m unidad = (Unidad escalar / Unidad segundo).! !!Test11DivisionDeMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 20:35'!test01DivisionUnidadesConEscalar	| m |	m := 6 metro / 2.	self assert: (m isKindOf: Medida).	self assert: m cantidad = 3.	self assert: m unidad = Unidad metro.! !!Test11DivisionDeMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 20:53'!test05ProductoDeMedidasSimplificables	self assert: 6 metro * (1 / 2 metro) = 3! !!Test11DivisionDeMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 20:35'!test03DivisionDeMedidasDistintas	| m |	m := 6 metro / 2 segundo.	self assert: (m isKindOf: Medida).	self assert: m cantidad  = 3.	self assert: m unidad = (Unidad metro / Unidad segundo)! !!Test11DivisionDeMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 20:49'!test04DivisionDeMedidasIguales	self assert: (6 metro / 2 metro) = 3! !TestCase subclass: #Test14RenombreUnidades	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!Test14RenombreUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/10/2015 12:38'!test03PrintOnConRenombreExacto	self assertPrintOn: 1 newton equals: '1 newton'.	self assertPrintOn: 1 pascal equals: '1 pascal'! !!Test14RenombreUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/10/2015 12:28'!test02ListarRenombreDeUnidades	| dic |	dic := Unidad renombres.	self assert: (dic at: 'newton') equals: Unidad newton.	self assert: (dic at: 'pascal') equals: Unidad pascal.	self assert: (dic includesKey: 'escalar') = false.	self assert: (dic includesKey: 'metro') = false! !!Test14RenombreUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/10/2015 12:06'!test01CrearUnidadesDeRenombre	self assert: Unidad pascal equals: Unidad kilogramo / (Unidad segundo * Unidad segundo * Unidad metro).	self assert: Unidad newton equals: Unidad metro * Unidad kilogramo / (Unidad segundo * Unidad segundo).		self assert: 1 pascal equals: 1 kilogramo / 1 segundo segundo metro.	self assert: 1 newton equals: 1 metro kilogramo / 1 segundo segundo.! !!Test14RenombreUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/10/2015 12:07'!assertPrintOn: unObjeto equals: unString 	| salida |	salida := String new writeStream.	unObjeto printOn: salida.	self assert: salida contents equals: unString! !!Test14RenombreUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/10/2015 14:35'!test04PrintOnConRenombreYAdicionales	self assertPrintOn: 1 newton * 2 metro equals: '2 newton metro'.	self assertPrintOn: 10 newton / 2 segundo equals: '5 newton / segundo'! !TestCase subclass: #Test05ProductoDeUnidades	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!Test05ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/5/2015 02:20'!test12ProductosIguales	self assert: (Unidad metro * Unidad kilogramo) = (Unidad kilogramo * Unidad metro)		! !!Test05ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 20:31'!test06ProductoUnidadesEscalares	self assert: (Unidad escalar productoEscalar: Unidad escalar) = Unidad escalar! !!Test05ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/5/2015 20:15'!test13ProductosDistintos	self assert: (Unidad metro * Unidad kilogramo) ~= (Unidad kilogramo * Unidad metro * Unidad metro).	self assert: (Unidad metro * Unidad kilogramo * Unidad kilogramo) ~= (Unidad kilogramo * Unidad metro * Unidad metro)		! !!Test05ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 20:29'!test04ProductoUnidadBasicaPorEscalar	self assert: (Unidad metro productoEscalar: Unidad escalar) = Unidad metro! !!Test05ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 20:27'!test01ProductoUnidadesBasicas	| metro2 |	metro2 := Unidad metro productoBasica: Unidad metro.	self assert: (metro2 isKindOf: ProductoDeUnidades).	self assertCollection: metro2 factores hasSameElements: (Array with: Unidad metro with: Unidad metro).! !!Test05ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 20:28'!test02ProductoUnidadesBasicasConOperador	| metro2 |	metro2 := Unidad metro * Unidad metro.	self assert: (metro2 isKindOf: ProductoDeUnidades).	self assertCollection: metro2 factores hasSameElements: (Array with: Unidad metro with: Unidad metro).! !!Test05ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 20:55'!test10ProductoProductoPorProducto	| kmMetro |	kmMetro := (Unidad kilogramo * Unidad metro) productoProducto: (Unidad kilogramo * Unidad metro).	self assert: (kmMetro isKindOf: ProductoDeUnidades).	self assertCollection: kmMetro factores hasSameElements: (Array with: Unidad kilogramo with: Unidad kilogramo with: Unidad metro with: Unidad metro).! !!Test05ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 20:55'!test08ProductoUnidadBasicasPorProducto	| kmMetro2 |	kmMetro2 := Unidad metro productoProducto: (Unidad kilogramo * Unidad metro).	self assert: (kmMetro2 isKindOf: ProductoDeUnidades).	self assertCollection: kmMetro2 factores hasSameElements: (Array with: Unidad kilogramo with: Unidad metro with: Unidad metro).! !!Test05ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 20:31'!test07ProductoUnidadesEscalaresConOperador	self assert: Unidad escalar * Unidad escalar = Unidad escalar! !!Test05ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 20:55'!test09ProductoUnidadEscalarPorProducto	| kmMetro |	kmMetro := Unidad escalar productoProducto: (Unidad kilogramo * Unidad metro).	self assert: (kmMetro isKindOf: ProductoDeUnidades).	self assertCollection: kmMetro factores hasSameElements: (Array with: Unidad kilogramo with: Unidad metro).! !!Test05ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/5/2015 02:20'!test11ProductoProductoConOperador	| m2 km2 k2m2 |	m2 := (Unidad escalar * (Unidad metro * Unidad metro)).	self assert: (m2 isKindOf: ProductoDeUnidades).	self assertCollection: m2 factores hasSameElements: { Unidad metro. Unidad metro}.		m2 := ((Unidad metro * Unidad metro) * Unidad escalar).	self assert: (m2 isKindOf: ProductoDeUnidades).	self assertCollection: m2 factores hasSameElements: { Unidad metro. Unidad metro}.		km2 := (Unidad kilogramo * (Unidad metro * Unidad metro)).	self assert: (km2 isKindOf: ProductoDeUnidades).	self assertCollection: km2 factores hasSameElements: { Unidad kilogramo . Unidad metro. Unidad metro}.	 	km2 := ((Unidad kilogramo * Unidad metro) * Unidad metro).	self assert: (km2 isKindOf: ProductoDeUnidades).	self assertCollection: km2 factores hasSameElements: { Unidad kilogramo . Unidad metro. Unidad metro}.		k2m2 := (Unidad kilogramo * Unidad kilogramo) * (Unidad metro * Unidad metro).	self assert: (k2m2 isKindOf: ProductoDeUnidades).	self assertCollection: k2m2 factores hasSameElements: { Unidad kilogramo . Unidad kilogramo. Unidad metro. Unidad metro}.	! !!Test05ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 20:28'!test03ProductoUnidadEscalarPorBasica	self assert: (Unidad escalar productoBasica: Unidad metro) = Unidad metro! !!Test05ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 20:30'!test05ProductoUnidadBasicaPorEscalarConOperador	self assert: Unidad metro * Unidad escalar = Unidad metro.	self assert: Unidad escalar * Unidad metro = Unidad metro.! !Object subclass: #Unidad	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Unidad class	instanceVariableNames: ''!!Unidad class methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 16:29'!segundo	^UnidadBasica deNombre: 'segundo'.! !!Unidad class methodsFor: 'as yet unclassified' stamp: 'Raul 6/13/2015 22:39'!kilogramo	^UnidadBasica deNombre: 'kilogramo'.! !!Unidad class methodsFor: 'as yet unclassified' stamp: 'Raul 6/13/2015 22:39'!metro	^UnidadBasica deNombre:'metro'.! !!Unidad class methodsFor: 'as yet unclassified' stamp: 'Raul 6/13/2015 23:02'!escalar	^UnidadEscalar new.! !Unidad subclass: #UnidadBasica	instanceVariableNames: 'nombre'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!UnidadBasica methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 13:10'!productoProducto: unProductoDeUnidades	^unProductoDeUnidades productoBasica: self.! !!UnidadBasica methodsFor: 'as yet unclassified' stamp: 'raul 6/17/2015 19:28'!= otraUnidad	^ self hash =  otraUnidad hash.! !!UnidadBasica methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 12:42'!* otraUnidad	^otraUnidad productoBasica: self.! !!UnidadBasica methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 17:29'!productoBasica: otraUnidad	^ProductoDeUnidades de: (Array with: otraUnidad with: self).! !!UnidadBasica methodsFor: 'as yet unclassified' stamp: 'raul 6/17/2015 18:46'!/ otraUnidad	^otraUnidad dividiendoBasica: self.! !!UnidadBasica methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 18:31'!hash	^ nombre hash! !!UnidadBasica methodsFor: 'as yet unclassified' stamp: 'raul 6/17/2015 19:16'!dividiendoBasica: otraUnidad	(self = otraUnidad) 		ifTrue: [ ^UnidadEscalar new ].		^DivisionDeUnidades new initNumerador: (Array with: otraUnidad ) yDenominador: (Array with: self).! !!UnidadBasica methodsFor: 'as yet unclassified' stamp: 'Raul 6/13/2015 22:47'!initNombre: unNombre	nombre := unNombre.	^self.! !!UnidadBasica methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 17:02'!printOn: aStream	aStream nextPutAll: nombre.! !!UnidadBasica methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 12:40'!productoEscalar: otraUnidad	^self.! !!UnidadBasica methodsFor: 'as yet unclassified' stamp: 'Raul 6/13/2015 22:42'!nombre	^nombre.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UnidadBasica class	instanceVariableNames: ''!!UnidadBasica class methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/3/2015 11:27'!deNombre: aString 	^ self new initNombre: aString! !Unidad subclass: #ProductoDeUnidades	instanceVariableNames: 'factores'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 14:59'!productoProducto: otroProductoDeUnidades	|nuevosFactores|	nuevosFactores  := (OrderedCollection newFrom: factores).	nuevosFactores addAll: otroProductoDeUnidades factores.	^ProductoDeUnidades de:  nuevosFactores.! !!ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 14:58'!* param	^param productoProducto: self.! !!ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 17:58'!printOn: aStream 	factores do: [ :unaUnidad | aStream nextPutAll: unaUnidad nombre.]        separatedBy: [ aStream nextPut: Character space ]! !!ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'raul 6/17/2015 19:22'!init: unArrayDeFactores	factores := unArrayDeFactores asBag.	^self.! !!ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'raul 6/17/2015 19:24'!productoBasica: unaUnidad	|nuevosFactores|	nuevosFactores := Bag newFrom:factores.	nuevosFactores add: unaUnidad.	^ProductoDeUnidades de: nuevosFactores .! !!ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 14:58'!productoEscalar: unaUnidadEscalar	^self.! !!ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'raul 6/17/2015 19:23'!factores	^factores.! !!ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'raul 6/17/2015 19:24'!hash	^ factores hash! !!ProductoDeUnidades methodsFor: 'as yet unclassified' stamp: 'raul 6/17/2015 19:24'!= otroProductoDeUnidades	|otrosFactores|	otrosFactores := (otroProductoDeUnidades factores).	^ factores = otrosFactores.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ProductoDeUnidades class	instanceVariableNames: ''!!ProductoDeUnidades class methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/8/2015 18:31'!de: factores 	factores ifEmpty: [ ^ Unidad escalar ]. 	(factores size = 1) ifTrue: [ ^ factores first ].	^ self new init: factores! !Unidad subclass: #UnidadEscalar	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!UnidadEscalar methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 12:51'!productoProducto: unProductoDeUnidades	^unProductoDeUnidades.! !!UnidadEscalar methodsFor: 'as yet unclassified' stamp: 'raul 6/17/2015 19:29'!= otraUnidad	^ otraUnidad isKindOf: UnidadEscalar.! !!UnidadEscalar methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 12:44'!* otraUnidad	^otraUnidad productoEscalar: self.! !!UnidadEscalar methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 18:05'!dividiendoEscalar: otraUnidad 	^otraUnidad.! !!UnidadEscalar methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 12:40'!productoBasica: otraUnidad	^otraUnidad.! !!UnidadEscalar methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 18:05'!/ otraUnidad	^otraUnidad dividiendoEscalar: self.! !!UnidadEscalar methodsFor: 'as yet unclassified' stamp: 'raul 6/17/2015 19:29'!hash	^ UnidadEscalar hash.! !!UnidadEscalar methodsFor: 'as yet unclassified' stamp: 'raul 6/17/2015 19:17'!dividiendoBasica: otraUnidad 	^otraUnidad.! !!UnidadEscalar methodsFor: 'as yet unclassified' stamp: 'raul 6/17/2015 18:54'!printOn: aStream 	aStream nextPutAll: 'escalar'! !!UnidadEscalar methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 12:42'!productoEscalar: otraUnidad	^otraUnidad.! !TestCase subclass: #Test02CrearMedidas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!Test02CrearMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 20:30'!test01NumeroConMedida	self assert: (1 metro isKindOf: Medida).	self assert: (1 kilogramo isKindOf: Medida).	self assert: (1 segundo isKindOf: Medida).! !!Test02CrearMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/3/2015 11:51'!test02PropiedadesDeMedida	self assert: 1 metro cantidad = 1.	self assert: 1 metro unidad = Unidad metro! !!Test02CrearMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 09:11'!test03PropiedadesDeEscalar	self assert: 1 cantidad = 1.	self assert: 1 unidad = Unidad escalar! !TestCase subclass: #Test01CrearUnidades	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!Test01CrearUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 17:30'!test06CrearUnidadEscalar	self assert: (Unidad escalar isKindOf: UnidadEscalar)! !!Test01CrearUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 17:30'!test05UnidadesIguales	self assert: (Unidad kilogramo = Unidad kilogramo).  self assert: (Unidad metro = Unidad metro).  self assert: (Unidad escalar = Unidad escalar)! !!Test01CrearUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/3/2015 11:31'!test01CrearMetro	self assert: (Unidad metro isKindOf: UnidadBasica)! !!Test01CrearUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/3/2015 11:31'!test03NombreDeUnidades	self assert: Unidad kilogramo nombre = 'kilogramo'.	self assert: Unidad metro nombre = 'metro'! !!Test01CrearUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/2/2015 20:52'!test04UnidadesDistintas	self assert: (Unidad kilogramo ~= Unidad metro)! !!Test01CrearUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/3/2015 11:31'!test02CrearKilogramo	self assert: (Unidad kilogramo isKindOf: UnidadBasica)! !TestCase subclass: #Test09ImprimirMedidas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!Test09ImprimirMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/10/2015 10:50'!test01MedidaBasica	self assertPrintOn: 1 metro equals: '1 metro' ! !!Test09ImprimirMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/10/2015 10:53'!test02Escalar	self assertPrintOn: 4 metro / 2 metro equals: '2'! !!Test09ImprimirMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/10/2015 10:51'!assertPrintOn: unObjeto equals: unString 	| salida |	salida := String new writeStream.	unObjeto printOn: salida.	self assert: salida contents equals: unString! !!Test09ImprimirMedidas methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/10/2015 10:53'!test03Producto	self assertPrintOn: 4 metro * 2 segundo equals: '8 metro segundo'! !Unidad subclass: #DivisionDeUnidades	instanceVariableNames: 'numerador denominador'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 18:15'!numerador	^numerador.! !!DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 18:18'!initNumerador: unaColeccionDeUnidades yDenominador: otraColeccionDeUnidades	numerador := unaColeccionDeUnidades asOrderedCollection.	denominador := otraColeccionDeUnidades asOrderedCollection.! !!DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 18:16'!denominador	^denominador.! !TestCase subclass: #Test12ImprimirUnidades	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!Test12ImprimirUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/11/2015 12:20'!test01DivisionViaPrintOn	| salida |	salida := String new writeStream.	Unidad metro / Unidad segundo printOn: salida.	self assert: salida contents equals: 'metro / segundo'! !!Test12ImprimirUnidades methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/11/2015 12:20'!test02DivisionSinNumeradorViaPrintOn	| salida |	salida := String new writeStream.	Unidad metro / (Unidad metro * Unidad segundo) printOn: salida.	self assert: salida contents equals: '1 / segundo'! !Object subclass: #Medida	instanceVariableNames: 'cantidad unidad'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!Medida methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 16:39'!+ otro 	(unidad = otro unidad)	ifTrue: [^Medida new initCantidad: (cantidad + otro cantidad) initUnidad: unidad.]	ifFalse:[Exception new:'Unidades distintas']! !!Medida methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 16:28'!= otraMedida	^(unidad = otraMedida unidad) and: (cantidad = otraMedida cantidad).! !!Medida methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 15:24'!* otro 	^Medida new initCantidad: (self cantidad * otro cantidad) initUnidad: (self unidad * otro unidad)! !!Medida methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 15:31'!segundo	^self * 1 segundo.! !!Medida methodsFor: 'as yet unclassified' stamp: 'Raul 6/13/2015 23:18'!unidad	^unidad.! !!Medida methodsFor: 'as yet unclassified' stamp: 'Raul 6/13/2015 23:17'!initCantidad: unaCantidad initUnidad: unaUnidad	cantidad := unaCantidad.	unidad := unaUnidad.	^self.! !!Medida methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/9/2015 20:48'!adaptToNumber: anInteger andSend: aString	| msg |	msg := aString. 	aString = #/ ifTrue: [ 		msg := #divInv:	].	^ self perform: msg with: anInteger! !!Medida methodsFor: 'as yet unclassified' stamp: 'raul 6/17/2015 18:43'!/ otraMedida	| nuevaCantidad nuevaUnidad |		nuevaCantidad := cantidad / otraMedida cantidad.	nuevaUnidad := unidad / otraMedida unidad.	^Medida new initCantidad: nuevaCantidad  initUnidad:  nuevaUnidad.! !!Medida methodsFor: 'as yet unclassified' stamp: 'raul 6/17/2015 19:36'!hash	^  cantidad hash + unidad hash.! !!Medida methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 15:31'!kilogramo	^self * 1 kilogramo.! !!Medida methodsFor: 'as yet unclassified' stamp: 'raul 6/17/2015 19:12'!printOn: aStream	cantidad printOn: aStream.		(unidad isKindOf: UnidadEscalar )		ifFalse: [ aStream nextPut:  Character space.					  unidad printOn: aStream. ]! !!Medida methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/10/2015 14:52'!divInv: otro 	self shouldBeImplemented! !!Medida methodsFor: 'as yet unclassified' stamp: 'Raul 6/13/2015 23:16'!cantidad	^cantidad.! !!Medida methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 16:40'!- otro 	(unidad = otro unidad)	ifTrue: [^Medida new initCantidad: (cantidad - otro cantidad) initUnidad: unidad.]	ifFalse:[Exception new:'Unidades distintas']! !!Medida methodsFor: 'as yet unclassified' stamp: 'Raul 6/14/2015 15:31'!metro	^self * 1 metro.! !TestCase subclass: #Test04OperacionesConEscalares	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!Test04OperacionesConEscalares methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 17:49'!test01ProductoMedidaEscalar  self assert: 4 metro * 5 = 20 metro! !!Test04OperacionesConEscalares methodsFor: 'as yet unclassified' stamp: 'bcardiff 6/4/2015 17:50'!test02ProductoEscalarMedida  self assert: 4 * 4 metro = 16 metro! !'From Pharo4.0 of 18 March 2013 [Latest update: #40614] on 17 June 2015 at 7:37:25.233804 pm'!!Number methodsFor: '*PLP-TP-2015C1' stamp: 'Raul 6/13/2015 23:06'!pascal	^Medida new.! !'From Pharo4.0 of 18 March 2013 [Latest update: #40614] on 17 June 2015 at 7:37:25.234804 pm'!!Number methodsFor: '*PLP-TP-2015C1' stamp: 'Raul 6/13/2015 23:06'!newton	^Medida new.! !'From Pharo4.0 of 18 March 2013 [Latest update: #40614] on 17 June 2015 at 7:37:25.235804 pm'!!Number methodsFor: '*PLP-TP-2015C1' stamp: 'Raul 6/13/2015 23:24'!kilogramo	^Medida new initCantidad: self initUnidad: Unidad kilogramo.! !'From Pharo4.0 of 18 March 2013 [Latest update: #40614] on 17 June 2015 at 7:37:25.235804 pm'!!Number methodsFor: '*PLP-TP-2015C1' stamp: 'Raul 6/13/2015 23:19'!cantidad	^self.! !'From Pharo4.0 of 18 March 2013 [Latest update: #40614] on 17 June 2015 at 7:37:25.235804 pm'!!Number methodsFor: '*PLP-TP-2015C1' stamp: 'Raul 6/13/2015 23:15'!metro	^Medida new initCantidad: self initUnidad: Unidad metro.! !'From Pharo4.0 of 18 March 2013 [Latest update: #40614] on 17 June 2015 at 7:37:25.236804 pm'!!Number methodsFor: '*PLP-TP-2015C1' stamp: 'Raul 6/14/2015 16:29'!segundo	^Medida new initCantidad: self initUnidad: Unidad segundo.! !'From Pharo4.0 of 18 March 2013 [Latest update: #40614] on 17 June 2015 at 7:37:25.236804 pm'!!Number methodsFor: '*PLP-TP-2015C1' stamp: 'Raul 6/13/2015 23:19'!unidad	^Unidad escalar.! !